CREATE DATABASE sql_AIR_CARGO;
USE sql_AIR_CARGO;

CREATE TABLE route_details (
route_id INT UNIQUE PRIMARY KEY,
flight_num INT UNIQUE CHECK (flight_num BETWEEN 1111 AND 9999),
origin_airport VARCHAR(10),
destination_airport VARCHAR(10),
aircraft_id VARCHAR(50) ,
distance_miles INT CHECK (distance_miles > 0)
);


SELECT c.*,p.route_id,p.aircraft_id,p.seat_num,p.flight_num
FROM customer c
LEFT JOIN passengers_on_flights p
on c.customer_id=p.customer_id
WHERE route_id BETWEEN 1 and 25;

SELECT COUNT(CUSTOMER_ID) AS NUM_OF_PASSENGERS, CLASS_ID,SUM(NO_OF_TICKETS * PRICE_PER_TICKET) AS REVENUE
FROM TICKET_DETAILS
WHERE CLASS_ID='BUSSINESS'
GROUP BY CLASS_ID;


SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULL_NAME
FROM CUSTOMER;

SELECT C.*,T.NO_OF_TICKETS,T.AIRCRAFT_ID
FROM CUSTOMER C
JOIN TICKET_DETAILS T
ON C.CUSTOMER_ID = T.CUSTOMER_ID
WHERE NO_OF_TICKETS <> 0;

SELECT T.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME ,T.BRAND
FROM CUSTOMER C
JOIN TICKET_DETAILS T
ON C.CUSTOMER_ID = T.CUSTOMER_ID
WHERE BRAND = 'EMIRATES';


SELECT P.CUSTOMER_ID, P.CLASS_ID, C.FIRST_NAME, C.LAST_NAME
FROM CUSTOMER C
JOIN PASSENGERS_ON_FLIGHTS P
ON C.CUSTOMER_ID = P.CUSTOMER_ID
GROUP BY P.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME,P.CLASS_ID
HAVING COUNT(CASE WHEN P.CLASS_ID = 'ECONOMY PLUS' THEN 1 END) > 0;


DELIMITER //
CREATE PROCEDURE CheckRevenue()
BEGIN
DECLARE total_revenue INT;
SELECT SUM(no_of_tickets * price_per_ticket) INTO total_revenue
FROM ticket_details;
IF total_revenue > 10000 THEN
SELECT 'CROSSED' AS revenue_status;
ELSE
SELECT 'NOT CROSSED' AS revenue_status;
END IF;
END //
DELIMITER ;
CALL CheckRevenue();


CREATE USER 'NAINA'@'%' IDENTIFIED BY 'NAINA123';
GRANT SELECT, INSERT, UPDATE, DELETE ON sql_air_cargo.* TO 'NAINA'@'%';
FLUSH PRIVILEGES;


SELECT CLASS_ID, MAX(PRICE_PER_TICKET) OVER (PARTITION BY CLASS_ID) AS MAX_TCKT_PRICE
FROM TICKET_DETAILS;


CREATE INDEX idx_route_id ON passengers_on_flights(route_id);
SELECT c.customer_id, p.route_id, c.first_name, c.last_name
FROM passengers_on_flights p
JOIN customer c
ON p.customer_id = c.customer_id
WHERE
p.route_id = 4;



SELECT customer_id,aircraft_id,SUM(Price_per_ticket) AS total_price
FROM ticket_details
GROUP BY
customer_id, aircraft_id WITH ROLLUP;


create view business_class_v as
select c.customer_id,c.first_name,c.last_name,t.class_id,t.brand
from customer c
join ticket_details t
on c.customer_id = t.customer_id
where class_id='bussiness' and brand='airlines';
select * from business_class_v;


DROP PROCEDURE IF EXISTS PASSNG_BW_ROUTES;
DELIMITER $$
CREATE PROCEDURE PASSNG_BW_ROUTES(DISTANCE_1 INT, DISTANCE_2 INT)
BEGIN
DECLARE TABLE_EXIST INT;
SELECT COUNT(*) INTO TABLE_EXIST
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME='PASSENGERS_ON_FLIGHTS';


IF(TABLE_EXIST)=0 THEN
SIGNAL SQLSTATE '45000'
SET message_text = 'ERROR : TABLE(PASSENGERS_ON_FLIGHTS) DOSE NOT EXIST';
ELSE
SELECT P.*, R.distance_miles
FROM passengers_on_flights P
JOIN routes R
ON P.route_id = R.route_id
WHERE R.distance_miles BETWEEN DISTANCE_1 AND DISTANCE_2;
END IF;
END $$
DELIMITER ;
CALL PASSNG_BW_ROUTES(2000,4000);



DELIMITER &&
CREATE PROCEDURE GET_DISTANCE()
BEGIN
SELECT * FROM routes
WHERE distance_miles > 2000;
END &&
CALL GET_DISTANCE();



DROP PROCEDURE DIST_CATEGORY;
DELIMITER //
CREATE PROCEDURE DIST_CATEGORY()
BEGIN
SELECT *,
CASE
WHEN distance_miles >= 0 AND distance_miles <= 2000 THEN 'SDT'
WHEN distance_miles > 2000 AND distance_miles <= 6500 THEN 'IDT'
WHEN distance_miles > 6500 THEN 'LDT'
ELSE 'UNKNOWN'
END AS
'CATEGORY'
FROM ROUTES;
END //
CALL DIST_CATEGORY();




DROP FUNCTION COMPLIMENTARY;
DELIMITER $$
CREATE FUNCTION COMPLIMENTARY(CLASS_ID VARCHAR(30))
RETURNS VARCHAR(20)
DETERMINISTIC
BEGIN
DECLARE COMP_SERVICE VARCHAR(50);
IF CLASS_ID = 'ECONOMY PLUS' OR  CLASS_ID = 'BUSSINESS' THEN
SET COMP_SERVICE = 'YES';
ELSE
SET COMP_SERVICE = 'NO';
END IF;
RETURN(COMP_SERVICE);
END $$
DELIMITER ;
SELECT P_DATE,CUSTOMER_ID,CLASS_ID,COMPLIMENTARY(CLASS_ID) AS COMPLIMENTARY_SERVICE
FROM ticket_details;




DROP PROCEDURE IF EXISTS LST_NAME;
DELIMITER //
CREATE PROCEDURE LST_NAME()
BEGIN
DECLARE C_ID VARCHAR(20);
DECLARE F_N VARCHAR(20);
DECLARE L_N VARCHAR(20);
DECLARE DOB VARCHAR(20);
DECLARE GEN VARCHAR(20);
DECLARE done INT DEFAULT FALSE;
DECLARE CURSOR_1 CURSOR FOR
SELECT  CUSTOMER_ID,FIRST_NAME,LAST_NAME,DATE_OF_BIRTH,GENDER FROM CUSTOMER
WHERE LAST_NAME = 'SCOTT';
OPEN CURSOR_1;
REPEAT FETCH CURSOR_1 INTO C_ID,F_N,L_N,DOB,GEN;
IF NOT done THEN
SELECT  C_ID AS CUST_ID,
F_N AS FIRST_NAME,
L_N AS LAST_NAME,
DOB AS DATE_OF_BIRTH,
GEN AS GENDER;
ELSE
SELECT 'No customer found with last name ending with Scott';
END IF;
UNTIL done END REPEAT;
CLOSE CURSOR_1;
END //
DELIMITER ;
CALL LST_NAME();




